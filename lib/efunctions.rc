## @file efunctions.rc
## @brief librarie for e*() functions that do not depend on OS
## @author Charles-Antoine Degennes <cadegenn@gmail.com>
## @copyright	(c) 2017 Charles-Antoine Degennes <cadegenn@gmail.com>

## @fn ebegin()
## @brief display begin message
## @param $message  the message to display
ebegin() {
	local message=${@}
	echo -ne "\n${INDENT}${THEME_BEGIN_COLOR} *${COLOR_NORMAL} ${message} " >> ${STDOUT}
}

## @fn ebreak()
## @brief print a break line
ebreak() {
	[ ! "${COLUMNS}" ] && COLUMNS=$(tput cols)
	for i in $(seq ${COLUMNS}); do echo -n '-' >> ${STDOUT}; done
}

## @fn edebug()
## @brief display debug message
## @param $message  the message to display
edebug() {
	if [ ${DEBUG} ]; then
		echo -e "${INDENT}${THEME_DEBUG_COLOR} * DEV: $@${COLOR_NORMAL}" > ${STDOUT}
	fi
}

## @fn edevel()
## @brief display message to help development
## @param $message  the message to display
edevel() {
	if [ ${DEVEL} ]; then
		echo -e "${INDENT}${THEME_DEVEL_COLOR} * DEV: $@${COLOR_NORMAL}" > ${STDOUT}
	fi
}

## @fn eend()
## @brief display end message
## @param $rc  the status code to display
## @see returncodes.rc
eend() {
	local rc=${1}
	[ ! "${COLUMNS}" ] && COLUMNS=$(tput cols)
	esetx $((COLUMNS - ${#rc_done} - 16))
	case ${rc} in
		${RC_DONE})	 echo -ne "${rc_done}" >> ${STDOUT}
						;;
		${RC_FAILED})   echo -ne "${rc_failed}" >> ${STDOUT}
						;;
		${RC_RUNNING})  echo -ne "${rc_running}" >> ${STDOUT}
						;;
		${RC_MISSED})   echo -ne "${rc_missed}" >> ${STDOUT}
						;;
		${RC_SKIPPED})  echo -ne "${rc_skipped}" >> ${STDOUT}
						;;
		${RC_UNUSED})   echo -ne "${rc_unused}" >> ${STDOUT}
						;;
		${RC_UNKNOWN})  echo -ne "${rc_unknown}" >> ${STDOUT}
						;;
		${RC_DEAD})	 echo -ne "${rc_dead}" >> ${STDOUT}
						;;
		*)			  echo -ne "${rc_unknown}" >> ${STDOUT}
						;;
	esac

}

## @fn eenter()
## @brief display message when entering something (a function for example or a loop)
## @param $message  the message to display
eenter() {
    local message=${@}
	if [ ${DEVEL} ]; then
    	echo -e "${INDENT}${THEME_ENTER_COLOR} >> ${message} ${COLOR_NORMAL}" > ${STDOUT}
	fi
}

## @fn eerror()
## @brief display error message
## @param $message  the error message to display
eerror() {
    local message=${@}
    echo -e "${INDENT}${THEME_ERROR_COLOR} * ERR: ${message} ${COLOR_NORMAL}" > ${STDOUT}
}

## @fn efatal()
## @brief display error message and exit
## @param $message  the error message to display
efatal() {
	eerror "$@"
	exit 1
}

## @fn einfo()
## @brief display info message
## @param $message  the message to display
einfo() {
    local message=${@}
    echo -e "${INDENT}${THEME_INFO_COLOR} * ${message} ${COLOR_NORMAL}" > ${STDOUT}
}

## @fn eleave()
## @brief display message when leaving something (a function for example or a loop)
## @param $message  the message to display
eleave() {
    local message=${@}
	if [ ${DEVEL} ]; then
    	echo -e "${INDENT}${THEME_ENTER_COLOR} << ${message} ${COLOR_NORMAL}" > ${STDOUT}
	fi
}

## @fn esubtitle()
## @brief display begin message
## @param $message  the message to display
esubtitle() {
	local message=${@}
	echo -ne "\n${INDENT}${THEME_TITLE_COLOR} * ${THEME_SUBTITLE_COLOR}${message}${COLOR_NORMAL}" >> ${STDOUT}
}

## @fn etitle()
## @brief display a title
## @param $message  the title to display
etitle() {
    local message=${@}
    echo -e -n "\n${THEME_TITLE_COLOR} " > ${STDOUT}
    for i in $(seq $((${#message}+6))); do echo -n '*'; done
    echo "\n ** ${message} ** ${COLOR_NORMAL}" > ${STDOUT}
}

## @fn everbose()
## @brief display verbose message
## @param $message  the message to display
everbose() {
    local message=${@}
    echo -e "${INDENT}${THEME_VERBOSE_COLOR} * ${message} ${COLOR_NORMAL}" > ${STDOUT}
}

## @fn ewarn()
## @brief display warning message
## @param $message  the warning to display
ewarn() {
    local message=${@}
    echo -e "${INDENT}${THEME_WARNING_COLOR} * ${message} ${COLOR_NORMAL}" > ${STDOUT}
}

