## @file curl.rc
## @brief Resource file for cURL calls
## @author Charles-Antoine Degennes <cadegenn@univ-lr.fr>
## @copyright 2017 UniveristÃ© de La Rochelle

## @var WEBRC
## @brief	HTTP reponse code of the last curl call
declare -g WEBRC

## @fn curl_exec()
## @brief call curl with specified parameters
## @param $curlParams	parameters specific to curl described in 'man curl'
## @param $httpParams	parameters specific to HTTP protocol (header, HTTP verb, etc...)
## @param $URL			URL to reach
## @retval (string)		body of response is printed to stdout
## @retval (int)		http return code is passed to return
curl_exec() {
	#eenter "${FUNCNAME}('${1}', '${2}', '${3}')"
	eenter "${FUNCNAME}()" #'${1}', '${2}', '${3}')"
	local curlParams=${1}
	local httpParams=${2}
	local URL=${3}
	local curlOptions="--silent --write-out '\\n%{http_code}'"
	#edevel "curlParams = ${curlParams}"
	#edevel "httpParams = ${httpParams}"
	#edevel "URL = ${URL}"

	edevel "curl ${curlOptions} ${curlParams} ${httpParams} ${URL} > /tmp/$$.curl"
	eval curl ${curlOptions} ${curlParams} ${httpParams} '${URL}' > /tmp/$$.curl
	local RC=$?
	local BODY=$(head -n -1 /tmp/$$.curl)
	# return statement cannot return value greater then 255. So we use a global variable
	WEBRC=$(tail -n 1 /tmp/$$.curl)

	#ewarn "BODY = ${BODY}"
	edevel "WEBRC = ${WEBRC}"

	eleave "${FUNCNAME}()"
	echo "${BODY}"
	#return $((WEBRC+0))
	return ${RC}
}

