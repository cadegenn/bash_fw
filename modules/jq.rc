## @file jq.rc
## @brief Resource file for jq processing
## @author Charles-Antoine Degennes <cadegenn@univ-lr.fr>
## @copyright 2017 Univeristé de La Rochelle

# if we include this file, make sure 'jq' is installed
# we need jq to parse JSON
if ! which jq > /dev/null; then
	efatal "jq not found on current system. Please install it. Aborting..."
fi

## @fn jsonToArray()
## @brief Convert JSON input to an associative or indexed array
## @param	$name	variable name of array
## @param	$json	JSON data
## @param	$assoc	(bool) if true, force creation of an associative array. In case keys are string-formated digits. Default: false.
## @param	$requote_values	(bool) if true, force 'jq' to requote values in array
## @return	$array	Array
## @retval	last return code
jsonToArray() {
	eenter "${FUNCNAME}()"
	local name="${1}"
	local json="${2}"
	local assoc="${3}"
	local requote_values="${4}"
	# reformat json if needed
	#json=$(echo "${json}" | sed -e 's/{\([[:digit:]]*\):/{"\1":"/g' -e 's/,\([[:digit:]]*\):/","\1":"/g' -e 's/"\?}/"}/g')
	#json=$(echo "${json}" | sed -e 's/'\''/___/' -e 's/"\?\([[:digit:]]\+\)"\?:"\?\([^,}"]*\)"\?,/"\1":"\2",/g')
	local type=$(echo ${json} | jq type | tr -d '"')
	local count=$(echo ${json} | jq '. | length')

	edevel "json = ${json}"
	edevel "assoc = ${assoc}"
	edevel "type = ${type}"
	edevel "count = ${count}"

	case ${type} in
		object)	# json is an object of the form { ... }
				local sArray=$(jsonObjectToArray "${name}" "${json}")
				edevel "sArray = ${sArray}"
				declare -A ${name}="(${sArray})"
				# declare is the return data because we were called with "eval $(jsonToArray var json)"
				declare -p ${name}
				return $?
				;;
		array)	# json is an array of the form [ ... ] but may contain objects
				local sArray="("
				for ((i=0; i<$count; i+=1)); do
					#edevel "i = ${i}"
					local el=$(echo "${json}" | jq -Mc '.['${i}']')
					edevel "el = ${el}"
					eval $(jsonToArray "${name}_${i}" "${el}")
					declare -p ${name}_${i}
					echo ";"
				done
				#declare -A ${name}="(${sArray})"
				# declare is the return data because we were called with "eval $(jsonToArray var json)"
				#declare -p ${name}
				return $?
				;;
	esac
	return $?

	# get all keys from json file
	#local KEYS=$(echo "${json}" | jq -r 'keys[]')
	declare -a KEYS="($(echo "${json}" | jq "keys[]" -r))"
	edevel "$(declare -p KEYS)"

	# associative array or indexed array ?
	if [[ ${KEYS[0]} =~ ^-?[0-9]+$ ]] && [ ! "${assoc}" ]; then
		# indexed array
		edevel "indexed array"
		readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
		declare -p ${name}
	else
		# associative array
		edevel "associative array"
		#readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
		# 2ème solution plus efficace avec la concaténation string + integer
		# trouvé @url https://stackoverflow.com/questions/25378013/how-to-convert-a-json-object-to-key-value-format-in-jq
		#declare -A ${name}="($(echo "${json}" | jq -r 'keys[] as $k | "[" + ($k) + "]=" + .[$k] + ""'))"
		edevel "json = ${json}"
		if [ "${requote_values}" ]; then
			edevel "requote_values = ${requote_values}"
			sArray="$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\"\(.value|tostring)\"")|.[]')"
		else
			edevel "requote_values = ${requote_values}"
			sArray=$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]')
		fi
		#declare -A ${name}="($(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]'))"
		#sArray=$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]' | sed -e 's/\]="\?\(.*\)"\?/]="\1"/')
		edevel "sArray = ${sArray}"
		declare -A ${name}="(${sArray})"
		declare -p ${name}
#		for k in ${KEYS}; do
#			# is ${k} an array ?
#			echo "${json}" | jq -r ".${k}[]"
#			case $? in
#				0)	# ${k} is an array
#					ewarn "..[${k}] is an array. Recursive arrays are not implemented yet."
#	#				readarray -t json_${k} < <(echo "${json}" | jq -r ".${k}[]")
#	#				export json_${k}
#	#				echo "json_${k}=${json_${k}}" >> /tmp/$$.jq
#					;;
#				*)	# ${k} is not an array
#					readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
#					declare -p ${name}
#					;;
#			esac
#		done
	fi
	
	edevel "$(declare -p ${name})"

	eleave "${FUNCNAME}()"
}

## @fn jsonToArrayOld()
## @brief Convert JSON input to an associative or indexed array
## @param	$name	variable name of array
## @param	$json	JSON data
## @param	$assoc	(bool) if true, force creation of an associative array. In case keys are string-formated digits. Default: false.
## @param	$requote_values	(bool) if true, force 'jq' to requote values in array
## @return	$array	Array
## @retval	last return code
## @deprecated
jsonToArrayOld() {
	eenter "${FUNCNAME}()"
	local name="${1}"
	local json="${2}"
	local assoc="${3}"
	local requote_values="${4}"
	# reformat json if needed
	json=$(echo "${json}" | sed -e 's/{\([[:digit:]]*\):/{"\1":"/g' -e 's/,\([[:digit:]]*\):/","\1":"/g' -e 's/"\?}/"}/g')
	local type=$(echo ${json} | jq type)
	local count=$(echo ${json} | jq '. | length')

	edevel "json = ${json}"
	edevel "assoc = ${assoc}"
	edevel "type = ${type}"
	edevel "count = ${count}"

	# sanitize
	[ ! ${count} ] && count=0
	if [ ${count} -eq 1 ]; then
		# replace [{...}] by simple {..} to avoid messing with bash arrays
		json=$(echo "${json}" | sed -e 's/^\[{/{/' -e 's/}\]$/}/')
		edevel "json = ${json}"
	fi

	# get all keys from json file
	#local KEYS=$(echo "${json}" | jq -r 'keys[]')
	declare -a KEYS="($(echo "${json}" | jq "keys[]" -r))"
	edevel "$(declare -p KEYS)"

	# associative array or indexed array ?
	if [[ ${KEYS[0]} =~ ^-?[0-9]+$ ]] && [ ! "${assoc}" ]; then
		# indexed array
		edevel "indexed array"
		readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
		declare -p ${name}
	else
		# associative array
		edevel "associative array"
		#readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
		# 2ème solution plus efficace avec la concaténation string + integer
		# trouvé @url https://stackoverflow.com/questions/25378013/how-to-convert-a-json-object-to-key-value-format-in-jq
		#declare -A ${name}="($(echo "${json}" | jq -r 'keys[] as $k | "[" + ($k) + "]=" + .[$k] + ""'))"
		edevel "json = ${json}"
		if [ "${requote_values}" ]; then
			edevel "requote_values = ${requote_values}"
			sArray="$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\"\(.value|tostring)\"")|.[]')"
		else
			edevel "requote_values = ${requote_values}"
			sArray=$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]')
		fi
		#declare -A ${name}="($(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]'))"
		#sArray=$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]=\(.value|tostring)")|.[]' | sed -e 's/\]="\?\(.*\)"\?/]="\1"/')
		edevel "sArray = ${sArray}"
		declare -A ${name}="(${sArray})"
		declare -p ${name}
#		for k in ${KEYS}; do
#			# is ${k} an array ?
#			echo "${json}" | jq -r ".${k}[]"
#			case $? in
#				0)	# ${k} is an array
#					ewarn "..[${k}] is an array. Recursive arrays are not implemented yet."
#	#				readarray -t json_${k} < <(echo "${json}" | jq -r ".${k}[]")
#	#				export json_${k}
#	#				echo "json_${k}=${json_${k}}" >> /tmp/$$.jq
#					;;
#				*)	# ${k} is not an array
#					readarray -t ${name} < <(echo "${json}" | jq -r ".[]")
#					declare -p ${name}
#					;;
#			esac
#		done
	fi
	
	edevel "$(declare -p ${name})"

	eleave "${FUNCNAME}()"
}

## @fn jqFormatJson()
## @brief	Properly format JSON
## @note Mainly ensure that all keys are string
## @param $var	Variable containig data. It is passed by reference.
jqFormatJson() {
	eenter "${FUNCNAME}()"

	declare -n var="${1}"
	edevel "var = ${var}"

	#var=$(echo "${var}" | sed -e 's/{\([[:digit:]]*\):/{\\"\1\\":/' -e 's/,\([[:digit:]]*\):/\\",\\"\1\\":/g')
	#echo "${var}" | sed -e 's/{\([[:digit:]]*\):/{"\1":"/' -e 's/,\([[:digit:]]*\):/","\1":"/g' -e 's/}/"}/'
	#var=$(echo "${var}" | sed -e 's/{\([[:digit:]]*\):/{"\1":"/' -e 's/,\([[:digit:]]*\):/","\1":"/g' -e 's/}/"}/')
	var="'$(echo \\"${var}\\" | sed -e 's/{\([[:digit:]]*\):/{\\"\1\\":\\"/' -e 's/,\([[:digit:]]*\):/\\",\\"\1\\":\\"/g' -e 's/}/\\"}/')'"
	edevel "var = ${var}"

	eleave "${FUNCNAME}()"
}

## @fn jsonObjectToArray()
## @brief Convert JSON object to an associative
## @note Here we suppose the object is juste a list of "key":"value" pairs
## @param	$name	variable name of array
## @param	$json	JSON data
## @return	$array	Array
## @retval	last return code
jsonObjectToArray() {
	eenter "${FUNCNAME}()"
	local name="${1}"
	local json="${2}"

    aObject=$(echo "${json}" | jq -r 'to_entries|map("[\"\(.key)\"]='"'\(.value|tostring)'"'")|.[]')
    edevel "aObject = ${aObject}"
    # remove single-quote into double-quoted values to avoid syntax error later on
    echo -n "${aObject}" | sed -e 's/"\([[:alnum:][:space:]]*\)'\''\([[:alnum:][:space:]]*\)"/"\1\2"/g'

	eleave "${FUNCNAME}()"
}
